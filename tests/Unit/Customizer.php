<?php
/**
 * Child Theme Library
 *
 * WARNING: This file is a part of the core Child Theme Library.
 * DO NOT edit this file under any circumstances. Please use
 * the functions.php file to make any theme modifications.
 *
 * @package   SEOThemes\ChildThemeLibrary
 * @link      https://github.com/seothemes/child-theme-library
 * @author    SEO Themes
 * @copyright Copyright Â© 2018 SEO Themes
 * @license   GPL-2.0-or-later
 */

namespace SEOThemes\ChildThemeLibrary;

/**
 * Adds Customizer logic to child theme.
 *
 * @since   1.4.0
 */
class Customizer {

	/**
	 * Child theme object.
	 *
	 * @since 1.4.0
	 *
	 * @var   object
	 */
	public $theme;

	/**
	 * Child theme colors config.
	 *
	 * @since 1.4.0
	 *
	 * @var   array
	 */
	public $colors;

	/**
	 * Constructor.
	 *
	 * @since  1.4.0
	 *
	 * @param  object $theme Child theme object.
	 *
	 * @return void
	 */
	public function __construct( $theme ) {

		$this->theme  = $theme;
		$this->colors = $theme->config['colors'];

	}

	/**
	 * Initialize class.
	 *
	 * @since  1.5.0
	 *
	 * @return void
	 */
	public function init() {

		add_action( 'customize_register', [ $this, 'settings' ] );
		add_action( 'wp_enqueue_scripts', [ $this, 'output' ], 100 );

	}

	/**
	 * Sets up the theme customizer sections, controls, and settings.
	 *
	 * @since  1.2.0
	 *
	 * @param  object $wp_customize Global customizer object.
	 *
	 * @return void
	 */
	public function settings( $wp_customize ) {

		$wp_customize->remove_control( 'background_color' );
		$wp_customize->remove_control( 'header_textcolor' );

		/*
		| ------------------------------------------------------------------
		| Colors
		| ------------------------------------------------------------------
		|
		| Adds the color settings to the Customizer. Loops through an
		| array of custom colors defined in the child theme config
		| file to output a new setting and control for each one.
		|
		*/
		foreach ( $this->colors as $color => $settings ) {

			$setting = "child_theme_{$color}_color";
			$label   = ucwords( str_replace( '_', ' ', $color ) ) . __( ' Color', 'child-theme-library' );

			$wp_customize->add_setting(
				$setting,
				array(
					'default'           => $settings['default'],
					'sanitize_callback' => 'sanitize_hex_color',
				)
			);

			$wp_customize->add_control(
				new \WP_Customize_Color_Control(
					$wp_customize,
					$setting,
					array(
						'section'  => 'colors',
						'label'    => $label,
						'settings' => $setting,
					)
				)
			);
		}
	}

	/**
	 * Logic to output customizer styles.
	 *
	 * @since  1.2.0
	 *
	 * @return void
	 */
	public function output() {

		$css = '';

		foreach ( $this->colors as $color => $settings ) {

			$custom_color = get_theme_mod(
				"child_theme_{$color}_color",
				$settings['default']
			);

			if ( $settings['default'] !== $custom_color ) {

				foreach ( $settings['output'] as $rule ) {

					$counter = 0;

					foreach ( $rule['elements'] as $element ) {

						$comma = ( 0 === $counter ++ ? '' : ',' );
						$css  .= $comma . $element;

					}

					$css .= '{';

					foreach ( $rule['properties'] as $property => $pattern ) {

						$css .= $property . ':' . sprintf( $pattern, $custom_color ) . ';';

					}

					$css .= '}';

				}
			}
		}

		if ( ! empty( $css ) ) {

			wp_add_inline_style( sanitize_title_with_dashes( 'child-theme' ), $this->theme->utilities->minify_css( $css ) );

		}

	}

}
